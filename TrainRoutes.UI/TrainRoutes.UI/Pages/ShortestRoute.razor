@page "/ShortestRoute"
@inject ITripService tripService
@inject IStationService stationService

<h5>Take the shortest route to your destination</h5>

<div class="form-group">
    <label for="tripOrigin">Enter your departure station:</label>
    <input id="tripOrigin" @bind="@Origin" />
    <small id="tripOriginHelp" class="form-text text-muted">Stations are A-F</small>
</div>
<div class="form-group">
    <label for="tripDestination">Enter your destination station:</label>
    <input id="tripDestination" @bind="@Destination" />
    <small id="tripDestinationHelp" class="form-text text-muted">Stations are A-F</small>
</div>
<div id="results" class="mb-2">
    @Message
</div>
<button type="button" class="btn btn-primary" @onclick="@(async () => await GetTrip())">Submit</button>

@code {
    private string Origin { get; set; } = "";
    private string Destination { get; set; } = "";
    private string Message { get; set; }

    private async Task GetTrip()
    {     
        try
        {
            var originStation = new Domain.Models.Station(Origin);
            var destStation = new Domain.Models.Station(Destination);
            var validation = "";

            if (!stationService.StationExists(originStation)) {
                validation += "Depature station does not exist! \n";
            }

            if (!stationService.StationExists(destStation))
            {
                validation += "Destination station does not exist! \n";
            }

            if (validation.Length == 0) {
                var route = await Task.Run(()=> tripService.GetTripWithShortestDistance(originStation, destStation));
                Message = $"Your trip is a distance of {route.Distance} and will travel through the following stations: {route.DisplayRoute}";
            } 
            else
            {
                throw new Exception(validation);
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
}
}